// burstInterleavedProducer.js
import { Kafka } from "kafkajs";

const kafka = new Kafka({ clientId: "burst-test-producer", brokers: ["localhost:9092"] });
const producer = kafka.producer();

const topics = [
  "input-topic-1","input-topic-2","input-topic-3","input-topic-4","input-topic-5"
];

function createRecord(id, topic) {
  return {
    key: `key-${id % 50}`, // reuse keys to exercise dedup collisions
    value: JSON.stringify({ id, message: `Message ${id} for ${topic}`, timestamp: new Date().toISOString() })
  };
}

const tinySleep = (ms) => new Promise(r => setTimeout(r, ms));

async function sendInterleaved(topic) {
  console.log(`\n🚀 Interleaved test for ${topic}`);
  for (let i = 0; i < 1000; i++) {
    // send original
    await producer.send({ topic, messages: [createRecord(i, topic)] });
    // tiny pause to give Streams a chance to process the original (tune 0-10ms)
    await tinySleep(2);
    // send duplicate
    await producer.send({ topic, messages: [createRecord(i, topic)] });
    if ((i + 1) % 100 === 0) console.log(`  sent ${i + 1} pairs`);
  }
  console.log(`✅ Done interleaved for ${topic}`);
}

async function run() {
  await producer.connect();
  for (const t of topics) await sendInterleaved(t);
  await producer.disconnect();
  console.log("🏁 All interleaved tests done");
}

run().catch(e => { console.error(e); process.exit(1); });



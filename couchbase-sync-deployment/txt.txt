/*This function will Change the status to amendment-inprogress and check subsequent requests to restrict/return error messages if the record is in amendment-inprogress*/

exports = async (pathEncounterId, firstName, middleName, lastName, teammateID, credentials, identityType) => {
    const client = context.services.get("##mongoname##");
    const db = client.db("##DB##");
    const { v4: uuidv4 } = require('uuid');
    const amendmentStatusList = ["in-amendment", "amendment-submitted", "amendment-received"];
    const session = client.startSession();
    const currentDate = new Date();
    let isTransactionStarted = false;
    try {
        const patientTxData = await db.collection("PatientTreatment").findOne({ pathEncounterId: pathEncounterId });
        if (amendmentStatusList.includes(patientTxData.amendmentStatus)) {
            return JSON.stringify({
                errorCode: "AmendmentInprogress",
                errorMessage: "Amendment of this treatment is in progress.",
                pathEncounterId: pathEncounterId
            });
        }
        const statusHistoryUpdate = {
            statusHistory: {
                status: "in-amendment",
                id: uuidv4().toUpperCase(),
                assigned: currentDate
            }
        };
        const amendmentOwnerData = {
            amendmentOwner: {
                id: uuidv4().toUpperCase(),
                firstName: firstName,
                middleName: middleName,
                lastName: lastName,
                teammateID: teammateID,
                credentials: credentials,
                identityType: identityType,
                treatmentStart: currentDate,
                treatmentEnd: null
            }
        };
        session.startTransaction();
        isTransactionStarted = true;
        await db.collection("PATH_Encounter").updateOne({ id: patientTxData.pathEncounterId }, { $set: { status: "in-amendment" }, $push: statusHistoryUpdate }, { session });
        await db.collection("PatientTreatment").updateOne({ pathEncounterId: pathEncounterId }, { $set: { amendmentStatus: "in-amendment" }, $push: teammateID ? amendmentOwnerData : {} }, { session: session });
        await session.commitTransaction();
        console.log(`COMMITED Sessions sucessfully for pathEncounterId ${pathEncounterId}`);
        return JSON.stringify({ status: "success", message: "Started Amendment successfully" })
    } catch (error) {
        console.log(`Error While processing for pathEncounterId ${pathEncounterId}, ${error}`);
        isTransactionStarted && await session.abortTransaction();
        console.log(`ABORTED Session for pathEncounterId ${pathEncounterId}`);
        return JSON.stringify({
            errorCode: "AmendmentStatusUpdateFailed",
            errorMessage: "Error occurred while changing the amendment status for treatment",
            pathEncounterId: pathEncounterId
        });
    } finally {
        session.endSession();
    }
}
